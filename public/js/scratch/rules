[{"id":"rul_NW670P1YNnVOnrqa","enabled":false,"script":"function (user, context, callback) {\n  // role should only be set to verified users.\n  if (!user.email || !user.email_verified) {\n    return callback(null, user, context);\n  }\n\n  user.app_metadata = user.app_metadata || {};\n\n  // set the 'admin' role to the following user\n  const whitelist = ['mmanzo806@gmail.com', 'limanzo@ucsc.edu']; //your whitelist goes here\n  user.app_metadata.role = user.email === whitelist ? 'admin' : 'user';\n\n  auth0.users.updateAppMetadata(user.user_id, user.app_metadata).then(() => {\n    context.idToken['http://localhost:8000/dashboard'] = user.app_metadata.role;\n    callback(null, user, context);\n  }).catch((err) => {\n    callback(err);\n  });\n}","name":"Empty rule","order":1,"stage":"login_success"},{"id":"rul_f8Tr97OgIYdRiLvZ","enabled":true,"script":"function accessOnWeekdaysOnly(user, context, callback) {\n  if (context.clientName === 'Custom Time Display') {\n    const date = new Date();\n    const d = date.getDay();\n\n    if (d === 0 || d === 6) {\n      return callback(\n        new UnauthorizedError('This app is available during the week')\n      );\n    }\n  }\n\n  callback(null, user, context);\n}","name":"Allow Access during weekdays for a specific App","order":2,"stage":"login_success"},{"id":"rul_0L038AeZk3ujWpkQ","enabled":true,"script":"function userWhitelistForSpecificApp(user, context, callback) {\n  // Access should only be granted to verified users.\n  if (!user.email || !user.email_verified) {\n    return callback(new UnauthorizedError('Access denied.'));\n  }\n\n  // only enforce for NameOfTheAppWithWhiteList\n  // bypass this rule for all other apps\n  if (context.clientName !== 'http://localhost:4040/my-solution') {\n    return callback(null, user, context);\n  }\n\n  const whitelist = ['mmanzo806@gmail.com', 'limanzo@ucsc.edu']; // authorized users\n  const userHasAccess = whitelist.some(function (email) {\n    return email === user.email;\n  });\n\n  if (!userHasAccess) {\n    return callback(new UnauthorizedError('Access denied.'));\n  }\n\n  callback(null, user, context);\n}","name":"Whitelist for a Specific App","order":4,"stage":"login_success"},{"id":"rul_oKjg48RQJFUaVxKE","enabled":true,"script":"function userWhitelistForSpecificApp(user, context, callback) {\n  // Access should only be granted to verified users.\n  if (!user.email || !user.email_verified) {\n    return callback(new UnauthorizedError('Access denied.'));\n  }\n\n  // only enforce for NameOfTheAppWithWhiteList\n  // bypass this rule for all other apps\n  if (context.clientName !== 'VanillaJSPA') {\n    return callback(null, user, context);\n  }\n\n  const whitelist = ['mmanzo806@gmail.com', 'limanzo@ucsc.edu']; // authorized users\n  const userHasAccess = whitelist.some(function (email) {\n    return email === user.email;\n  });\n\n  if (!userHasAccess) {\n    return callback(new UnauthorizedError('Access denied.'));\n  }\n\n  callback(null, user, context);\n}","name":"Whitelist for a Specific App - VanillaJSPA","order":5,"stage":"login_success"}]